let usedMessages = new Set();

chrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {
  if (request.action === "postMessage") {
    const messages = request.messages || [];
    let message = pickUnusedMessage(messages);

    if (!message) {
      usedMessages.clear();
      message = pickUnusedMessage(messages);
    }

    if (!message) {
      console.log("No messages to post.");
      return;
    }

    console.log("Posting message:", message);

    try {
      await simulateTypingAndPosting(message);
      usedMessages.add(message);
    } catch (err) {
      console.error("Error posting message:", err);
    }
  }
});

function pickUnusedMessage(messages) {
  for (const msg of messages) {
    if (!usedMessages.has(msg)) return msg;
  }
  return null;
}

async function simulateTypingAndPosting(message) {
  const textarea = document.querySelector('textarea[placeholder*="Say something"]');
  const postButton = document.querySelector('button[data-testid="post-button"]');

  if (!textarea || !postButton) {
    throw new Error("Could not find textarea or post button");
  }

  // Clear textarea first
  textarea.value = "";
  textarea.focus();

  // Simulate typing each char with random delay
  for (const char of message) {
    textarea.value += char;
    textarea.dispatchEvent(new Event('input', { bubbles: true }));
    await delay(randomBetween(50, 150));
  }

  // Move mouse to post button & click (simulate human movement)
  await simulateMouseMoveAndClick(postButton);
}

function simulateMouseMoveAndClick(element) {
  return new Promise(resolve => {
    const rect = element.getBoundingClientRect();
    const startX = window.innerWidth / 2;
    const startY = window.innerHeight / 2;
    const endX = rect.left + rect.width / 2;
    const endY = rect.top + rect.height / 2;

    const steps = 30;
    let currentStep = 0;

    function moveStep() {
      if (currentStep > steps) {
        element.click();
        resolve();
        return;
      }
      const x = startX + ((endX - startX) * currentStep / steps) + randomBetween(-3, 3);
      const y = startY + ((endY - startY) * currentStep / steps) + randomBetween(-3, 3);

      window.dispatchEvent(new MouseEvent("mousemove", {clientX: x, clientY: y, bubbles: true}));
      currentStep++;
      setTimeout(moveStep, randomBetween(10, 30));
    }

    moveStep();
  });
}

function delay(ms) {
  return new Promise(res => setTimeout(res, ms));
}

function randomBetween(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
